{"remainingRequest":"C:\\Users\\USER\\nodejs\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\USER\\nodejs\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\USER\\nodejs\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\USER\\nodejs\\frontend\\src\\pages\\Widgets.vue?vue&type=template&id=399ada3b&","dependencies":[{"path":"C:\\Users\\USER\\nodejs\\frontend\\src\\pages\\Widgets.vue","mtime":1638784929920},{"path":"C:\\Users\\USER\\nodejs\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USER\\nodejs\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\USER\\nodejs\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USER\\nodejs\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}